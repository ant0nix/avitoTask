// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	avitotask "github.com/ant0nix/avitoTask"
	gomock "github.com/golang/mock/gomock"
)

// MockStart is a mock of Start interface.
type MockStart struct {
	ctrl     *gomock.Controller
	recorder *MockStartMockRecorder
}

// MockStartMockRecorder is the mock recorder for MockStart.
type MockStartMockRecorder struct {
	mock *MockStart
}

// NewMockStart creates a new mock instance.
func NewMockStart(ctrl *gomock.Controller) *MockStart {
	mock := &MockStart{ctrl: ctrl}
	mock.recorder = &MockStartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStart) EXPECT() *MockStartMockRecorder {
	return m.recorder
}

// CreateServices mocks base method.
func (m *MockStart) CreateServices(service avitotask.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServices", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServices indicates an expected call of CreateServices.
func (mr *MockStartMockRecorder) CreateServices(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServices", reflect.TypeOf((*MockStart)(nil).CreateServices), service)
}

// CreateUser mocks base method.
func (m *MockStart) CreateUser(user avitotask.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStartMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStart)(nil).CreateUser), user)
}

// ShowServices mocks base method.
func (m *MockStart) ShowServices() ([]avitotask.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowServices")
	ret0, _ := ret[0].([]avitotask.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowServices indicates an expected call of ShowServices.
func (mr *MockStartMockRecorder) ShowServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowServices", reflect.TypeOf((*MockStart)(nil).ShowServices))
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DoOrder mocks base method.
func (m *MockService) DoOrder(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoOrder", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoOrder indicates an expected call of DoOrder.
func (mr *MockServiceMockRecorder) DoOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoOrder", reflect.TypeOf((*MockService)(nil).DoOrder), id)
}

// MakeOrder mocks base method.
func (m *MockService) MakeOrder(order avitotask.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrder", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockServiceMockRecorder) MakeOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockService)(nil).MakeOrder), order)
}

// MockInternalServices is a mock of InternalServices interface.
type MockInternalServices struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServicesMockRecorder
}

// MockInternalServicesMockRecorder is the mock recorder for MockInternalServices.
type MockInternalServicesMockRecorder struct {
	mock *MockInternalServices
}

// NewMockInternalServices creates a new mock instance.
func NewMockInternalServices(ctrl *gomock.Controller) *MockInternalServices {
	mock := &MockInternalServices{ctrl: ctrl}
	mock.recorder = &MockInternalServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalServices) EXPECT() *MockInternalServicesMockRecorder {
	return m.recorder
}

// ChangeBalance mocks base method.
func (m *MockInternalServices) ChangeBalance(balance avitotask.Balance) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBalance", balance)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBalance indicates an expected call of ChangeBalance.
func (mr *MockInternalServicesMockRecorder) ChangeBalance(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBalance", reflect.TypeOf((*MockInternalServices)(nil).ChangeBalance), balance)
}

// P2p mocks base method.
func (m *MockInternalServices) P2p(p2p avitotask.P2p) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "P2p", p2p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// P2p indicates an expected call of P2p.
func (mr *MockInternalServicesMockRecorder) P2p(p2p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P2p", reflect.TypeOf((*MockInternalServices)(nil).P2p), p2p)
}

// ShowBalance mocks base method.
func (m *MockInternalServices) ShowBalance(balance avitotask.Balance) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowBalance", balance)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowBalance indicates an expected call of ShowBalance.
func (mr *MockInternalServicesMockRecorder) ShowBalance(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBalance", reflect.TypeOf((*MockInternalServices)(nil).ShowBalance), balance)
}
